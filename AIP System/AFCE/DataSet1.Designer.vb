'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.42000
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableAIP_Ing_SealKeeper As AIP_Ing_SealKeeperDataTable

    Private tableUsers As UsersDataTable

    Private tableAIP_Ing As AIP_IngDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AIP_Ing_SealKeeper")) Is Nothing) Then
                MyBase.Tables.Add(New AIP_Ing_SealKeeperDataTable(ds.Tables("AIP_Ing_SealKeeper")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("AIP_Ing")) Is Nothing) Then
                MyBase.Tables.Add(New AIP_IngDataTable(ds.Tables("AIP_Ing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property AIP_Ing_SealKeeper() As AIP_Ing_SealKeeperDataTable
        Get
            Return Me.tableAIP_Ing_SealKeeper
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Users() As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property AIP_Ing() As AIP_IngDataTable
        Get
            Return Me.tableAIP_Ing
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone, DataSet1)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("AIP_Ing_SealKeeper")) Is Nothing) Then
                MyBase.Tables.Add(New AIP_Ing_SealKeeperDataTable(ds.Tables("AIP_Ing_SealKeeper")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("AIP_Ing")) Is Nothing) Then
                MyBase.Tables.Add(New AIP_IngDataTable(ds.Tables("AIP_Ing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAIP_Ing_SealKeeper = CType(MyBase.Tables("AIP_Ing_SealKeeper"), AIP_Ing_SealKeeperDataTable)
        If (initTable = True) Then
            If (Not (Me.tableAIP_Ing_SealKeeper) Is Nothing) Then
                Me.tableAIP_Ing_SealKeeper.InitVars()
            End If
        End If
        Me.tableUsers = CType(MyBase.Tables("Users"), UsersDataTable)
        If (initTable = True) Then
            If (Not (Me.tableUsers) Is Nothing) Then
                Me.tableUsers.InitVars()
            End If
        End If
        Me.tableAIP_Ing = CType(MyBase.Tables("AIP_Ing"), AIP_IngDataTable)
        If (initTable = True) Then
            If (Not (Me.tableAIP_Ing) Is Nothing) Then
                Me.tableAIP_Ing.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAIP_Ing_SealKeeper = New AIP_Ing_SealKeeperDataTable()
        MyBase.Tables.Add(Me.tableAIP_Ing_SealKeeper)
        Me.tableUsers = New UsersDataTable()
        MyBase.Tables.Add(Me.tableUsers)
        Me.tableAIP_Ing = New AIP_IngDataTable()
        MyBase.Tables.Add(Me.tableAIP_Ing)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeAIP_Ing_SealKeeper() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeUsers() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeAIP_Ing() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub AIP_Ing_SealKeeperRowChangeEventHandler(ByVal sender As Object, ByVal e As AIP_Ing_SealKeeperRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub AIP_IngRowChangeEventHandler(ByVal sender As Object, ByVal e As AIP_IngRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class AIP_Ing_SealKeeperDataTable
        Inherits Global.System.Data.TypedTableBase(Of AIP_Ing_SealKeeperRow)

        Private columnid As Global.System.Data.DataColumn

        Private columnAIPSealType As Global.System.Data.DataColumn

        Private columnAIPSealGroup As Global.System.Data.DataColumn

        Private columnAIPSealCompany As Global.System.Data.DataColumn

        Private columnAIPSealPre As Global.System.Data.DataColumn

        Private columnAIPSealNow As Global.System.Data.DataColumn

        Private columnAIPSealNext As Global.System.Data.DataColumn

        Private columnApproval_1 As Global.System.Data.DataColumn

        Private columnApproval_2 As Global.System.Data.DataColumn

        Private columnApproval_3 As Global.System.Data.DataColumn

        Private columnApproval_4 As Global.System.Data.DataColumn

        Private columnApproval_5 As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "AIP_Ing_SealKeeper"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealType
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealGroup
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealCompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealCompany
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealPreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealPre
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealNowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealNow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealNextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealNext
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As AIP_Ing_SealKeeperRow
            Get
                Return CType(Me.Rows(index), AIP_Ing_SealKeeperRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_Ing_SealKeeperRowChanging As AIP_Ing_SealKeeperRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_Ing_SealKeeperRowChanged As AIP_Ing_SealKeeperRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_Ing_SealKeeperRowDeleting As AIP_Ing_SealKeeperRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_Ing_SealKeeperRowDeleted As AIP_Ing_SealKeeperRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddAIP_Ing_SealKeeperRow(ByVal row As AIP_Ing_SealKeeperRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddAIP_Ing_SealKeeperRow(ByVal AIPSealType As String, ByVal AIPSealGroup As String, ByVal AIPSealCompany As String, ByVal AIPSealPre As String, ByVal AIPSealNow As String, ByVal AIPSealNext As String, ByVal Approval_1 As String, ByVal Approval_2 As String, ByVal Approval_3 As String, ByVal Approval_4 As String, ByVal Approval_5 As String) As AIP_Ing_SealKeeperRow
            Dim rowAIP_Ing_SealKeeperRow As AIP_Ing_SealKeeperRow = CType(Me.NewRow, AIP_Ing_SealKeeperRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AIPSealType, AIPSealGroup, AIPSealCompany, AIPSealPre, AIPSealNow, AIPSealNext, Approval_1, Approval_2, Approval_3, Approval_4, Approval_5}
            rowAIP_Ing_SealKeeperRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAIP_Ing_SealKeeperRow)
            Return rowAIP_Ing_SealKeeperRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByid(ByVal id As Integer) As AIP_Ing_SealKeeperRow
            Return CType(Me.Rows.Find(New Object() {id}), AIP_Ing_SealKeeperRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AIP_Ing_SealKeeperDataTable = CType(MyBase.Clone, AIP_Ing_SealKeeperDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AIP_Ing_SealKeeperDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnAIPSealType = MyBase.Columns("AIPSealType")
            Me.columnAIPSealGroup = MyBase.Columns("AIPSealGroup")
            Me.columnAIPSealCompany = MyBase.Columns("AIPSealCompany")
            Me.columnAIPSealPre = MyBase.Columns("AIPSealPre")
            Me.columnAIPSealNow = MyBase.Columns("AIPSealNow")
            Me.columnAIPSealNext = MyBase.Columns("AIPSealNext")
            Me.columnApproval_1 = MyBase.Columns("Approval_1")
            Me.columnApproval_2 = MyBase.Columns("Approval_2")
            Me.columnApproval_3 = MyBase.Columns("Approval_3")
            Me.columnApproval_4 = MyBase.Columns("Approval_4")
            Me.columnApproval_5 = MyBase.Columns("Approval_5")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnAIPSealType = New Global.System.Data.DataColumn("AIPSealType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealType)
            Me.columnAIPSealGroup = New Global.System.Data.DataColumn("AIPSealGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealGroup)
            Me.columnAIPSealCompany = New Global.System.Data.DataColumn("AIPSealCompany", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealCompany)
            Me.columnAIPSealPre = New Global.System.Data.DataColumn("AIPSealPre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealPre)
            Me.columnAIPSealNow = New Global.System.Data.DataColumn("AIPSealNow", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealNow)
            Me.columnAIPSealNext = New Global.System.Data.DataColumn("AIPSealNext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealNext)
            Me.columnApproval_1 = New Global.System.Data.DataColumn("Approval_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_1)
            Me.columnApproval_2 = New Global.System.Data.DataColumn("Approval_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_2)
            Me.columnApproval_3 = New Global.System.Data.DataColumn("Approval_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_3)
            Me.columnApproval_4 = New Global.System.Data.DataColumn("Approval_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_4)
            Me.columnApproval_5 = New Global.System.Data.DataColumn("Approval_5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_5)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, True))
            Me.columnid.AutoIncrement = True
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = False
            Me.columnid.ReadOnly = True
            Me.columnid.Unique = True
            Me.columnAIPSealType.MaxLength = 20
            Me.columnAIPSealGroup.MaxLength = 20
            Me.columnAIPSealCompany.MaxLength = 30
            Me.columnAIPSealPre.MaxLength = 20
            Me.columnAIPSealNow.MaxLength = 20
            Me.columnAIPSealNext.MaxLength = 20
            Me.columnApproval_1.MaxLength = 20
            Me.columnApproval_2.MaxLength = 20
            Me.columnApproval_3.MaxLength = 20
            Me.columnApproval_4.MaxLength = 20
            Me.columnApproval_5.MaxLength = 20
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewAIP_Ing_SealKeeperRow() As AIP_Ing_SealKeeperRow
            Return CType(Me.NewRow, AIP_Ing_SealKeeperRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AIP_Ing_SealKeeperRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AIP_Ing_SealKeeperRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AIP_Ing_SealKeeperRowChangedEvent) Is Nothing) Then
                RaiseEvent AIP_Ing_SealKeeperRowChanged(Me, New AIP_Ing_SealKeeperRowChangeEvent(CType(e.Row, AIP_Ing_SealKeeperRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AIP_Ing_SealKeeperRowChangingEvent) Is Nothing) Then
                RaiseEvent AIP_Ing_SealKeeperRowChanging(Me, New AIP_Ing_SealKeeperRowChangeEvent(CType(e.Row, AIP_Ing_SealKeeperRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AIP_Ing_SealKeeperRowDeletedEvent) Is Nothing) Then
                RaiseEvent AIP_Ing_SealKeeperRowDeleted(Me, New AIP_Ing_SealKeeperRowChangeEvent(CType(e.Row, AIP_Ing_SealKeeperRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AIP_Ing_SealKeeperRowDeletingEvent) Is Nothing) Then
                RaiseEvent AIP_Ing_SealKeeperRowDeleting(Me, New AIP_Ing_SealKeeperRowChangeEvent(CType(e.Row, AIP_Ing_SealKeeperRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveAIP_Ing_SealKeeperRow(ByVal row As AIP_Ing_SealKeeperRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AIP_Ing_SealKeeperDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class UsersDataTable
        Inherits Global.System.Data.TypedTableBase(Of UsersRow)

        Private columnid As Global.System.Data.DataColumn

        Private columnUserName As Global.System.Data.DataColumn

        Private columnUserGroup As Global.System.Data.DataColumn

        Private columnUserDept As Global.System.Data.DataColumn

        Private columnUserCompany As Global.System.Data.DataColumn

        Private columnUserCompanyID As Global.System.Data.DataColumn

        Private columnisGroupMaster As Global.System.Data.DataColumn

        Private columnisDeptManager As Global.System.Data.DataColumn

        Private columnisGeneraManager As Global.System.Data.DataColumn

        Private columnisIT As Global.System.Data.DataColumn

        Private columnisAdmin As Global.System.Data.DataColumn

        Private columnPermitPrint As Global.System.Data.DataColumn

        Private columnPermitSaveTo As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Users"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UserGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserGroup
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UserDeptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserDept
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UserCompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserCompany
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UserCompanyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserCompanyID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property isGroupMasterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisGroupMaster
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property isDeptManagerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisDeptManager
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property isGeneraManagerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisGeneraManager
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property isITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisIT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property isAdminColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisAdmin
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PermitPrintColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermitPrint
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PermitSaveToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermitSaveTo
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index), UsersRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event UsersRowChanging As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event UsersRowChanged As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event UsersRowDeleting As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event UsersRowDeleted As UsersRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddUsersRow(ByVal UserName As String, ByVal UserGroup As String, ByVal UserDept As String, ByVal UserCompany As String, ByVal UserCompanyID As String, ByVal isGroupMaster As Boolean, ByVal isDeptManager As Boolean, ByVal isGeneraManager As Boolean, ByVal isIT As Boolean, ByVal isAdmin As Boolean, ByVal PermitPrint As Boolean, ByVal PermitSaveTo As Boolean) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow, UsersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, UserName, UserGroup, UserDept, UserCompany, UserCompanyID, isGroupMaster, isDeptManager, isGeneraManager, isIT, isAdmin, PermitPrint, PermitSaveTo}
            rowUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByid(ByVal id As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {id}), UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone, UsersDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UsersDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnUserGroup = MyBase.Columns("UserGroup")
            Me.columnUserDept = MyBase.Columns("UserDept")
            Me.columnUserCompany = MyBase.Columns("UserCompany")
            Me.columnUserCompanyID = MyBase.Columns("UserCompanyID")
            Me.columnisGroupMaster = MyBase.Columns("isGroupMaster")
            Me.columnisDeptManager = MyBase.Columns("isDeptManager")
            Me.columnisGeneraManager = MyBase.Columns("isGeneraManager")
            Me.columnisIT = MyBase.Columns("isIT")
            Me.columnisAdmin = MyBase.Columns("isAdmin")
            Me.columnPermitPrint = MyBase.Columns("PermitPrint")
            Me.columnPermitSaveTo = MyBase.Columns("PermitSaveTo")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnUserGroup = New Global.System.Data.DataColumn("UserGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserGroup)
            Me.columnUserDept = New Global.System.Data.DataColumn("UserDept", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserDept)
            Me.columnUserCompany = New Global.System.Data.DataColumn("UserCompany", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCompany)
            Me.columnUserCompanyID = New Global.System.Data.DataColumn("UserCompanyID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCompanyID)
            Me.columnisGroupMaster = New Global.System.Data.DataColumn("isGroupMaster", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisGroupMaster)
            Me.columnisDeptManager = New Global.System.Data.DataColumn("isDeptManager", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisDeptManager)
            Me.columnisGeneraManager = New Global.System.Data.DataColumn("isGeneraManager", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisGeneraManager)
            Me.columnisIT = New Global.System.Data.DataColumn("isIT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisIT)
            Me.columnisAdmin = New Global.System.Data.DataColumn("isAdmin", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisAdmin)
            Me.columnPermitPrint = New Global.System.Data.DataColumn("PermitPrint", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermitPrint)
            Me.columnPermitSaveTo = New Global.System.Data.DataColumn("PermitSaveTo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermitSaveTo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, True))
            Me.columnid.AutoIncrement = True
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = False
            Me.columnid.ReadOnly = True
            Me.columnid.Unique = True
            Me.columnUserName.AllowDBNull = False
            Me.columnUserName.MaxLength = 15
            Me.columnUserGroup.AllowDBNull = False
            Me.columnUserGroup.MaxLength = 16
            Me.columnUserDept.MaxLength = 16
            Me.columnUserCompany.MaxLength = 30
            Me.columnUserCompanyID.MaxLength = 10
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow, UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UsersRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class AIP_IngDataTable
        Inherits Global.System.Data.TypedTableBase(Of AIP_IngRow)

        Private columnid As Global.System.Data.DataColumn

        Private columnFileName As Global.System.Data.DataColumn

        Private columnFileSize As Global.System.Data.DataColumn

        Private columnFileExtension As Global.System.Data.DataColumn

        Private columnFileData As Global.System.Data.DataColumn

        Private columnFileType As Global.System.Data.DataColumn

        Private columnFileID As Global.System.Data.DataColumn

        Private columnUploadTime As Global.System.Data.DataColumn

        Private columnUploadUser As Global.System.Data.DataColumn

        Private columnUploadUserID As Global.System.Data.DataColumn

        Private columnUploadUserCompany As Global.System.Data.DataColumn

        Private columnUploadUserGroup As Global.System.Data.DataColumn

        Private columnAIPSealType As Global.System.Data.DataColumn

        Private columnApproval_Now As Global.System.Data.DataColumn

        Private columnAIPDone As Global.System.Data.DataColumn

        Private columnRemarks As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "AIP_Ing"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileSize
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileExtensionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileExtension
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileData
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileType
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FileIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UploadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUploadTime
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UploadUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUploadUser
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UploadUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUploadUserID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UploadUserCompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUploadUserCompany
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property UploadUserGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUploadUserGroup
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPSealTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPSealType
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Approval_NowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApproval_Now
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AIPDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIPDone
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As AIP_IngRow
            Get
                Return CType(Me.Rows(index), AIP_IngRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_IngRowChanging As AIP_IngRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_IngRowChanged As AIP_IngRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_IngRowDeleting As AIP_IngRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event AIP_IngRowDeleted As AIP_IngRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddAIP_IngRow(ByVal row As AIP_IngRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddAIP_IngRow(ByVal FileName As String, ByVal FileSize As Integer, ByVal FileExtension As String, ByVal FileData() As Byte, ByVal FileType As String, ByVal FileID As String, ByVal UploadTime As Date, ByVal UploadUser As String, ByVal UploadUserID As Integer, ByVal UploadUserCompany As String, ByVal UploadUserGroup As String, ByVal AIPSealType As String, ByVal Approval_Now As String, ByVal AIPDone As Boolean, ByVal Remarks As String) As AIP_IngRow
            Dim rowAIP_IngRow As AIP_IngRow = CType(Me.NewRow, AIP_IngRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FileName, FileSize, FileExtension, FileData, FileType, FileID, UploadTime, UploadUser, UploadUserID, UploadUserCompany, UploadUserGroup, AIPSealType, Approval_Now, AIPDone, Remarks}
            rowAIP_IngRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAIP_IngRow)
            Return rowAIP_IngRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByid(ByVal id As Integer) As AIP_IngRow
            Return CType(Me.Rows.Find(New Object() {id}), AIP_IngRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AIP_IngDataTable = CType(MyBase.Clone, AIP_IngDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AIP_IngDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnFileName = MyBase.Columns("FileName")
            Me.columnFileSize = MyBase.Columns("FileSize")
            Me.columnFileExtension = MyBase.Columns("FileExtension")
            Me.columnFileData = MyBase.Columns("FileData")
            Me.columnFileType = MyBase.Columns("FileType")
            Me.columnFileID = MyBase.Columns("FileID")
            Me.columnUploadTime = MyBase.Columns("UploadTime")
            Me.columnUploadUser = MyBase.Columns("UploadUser")
            Me.columnUploadUserID = MyBase.Columns("UploadUserID")
            Me.columnUploadUserCompany = MyBase.Columns("UploadUserCompany")
            Me.columnUploadUserGroup = MyBase.Columns("UploadUserGroup")
            Me.columnAIPSealType = MyBase.Columns("AIPSealType")
            Me.columnApproval_Now = MyBase.Columns("Approval_Now")
            Me.columnAIPDone = MyBase.Columns("AIPDone")
            Me.columnRemarks = MyBase.Columns("Remarks")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnFileName = New Global.System.Data.DataColumn("FileName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileName)
            Me.columnFileSize = New Global.System.Data.DataColumn("FileSize", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileSize)
            Me.columnFileExtension = New Global.System.Data.DataColumn("FileExtension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileExtension)
            Me.columnFileData = New Global.System.Data.DataColumn("FileData", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileData)
            Me.columnFileType = New Global.System.Data.DataColumn("FileType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileType)
            Me.columnFileID = New Global.System.Data.DataColumn("FileID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileID)
            Me.columnUploadTime = New Global.System.Data.DataColumn("UploadTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUploadTime)
            Me.columnUploadUser = New Global.System.Data.DataColumn("UploadUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUploadUser)
            Me.columnUploadUserID = New Global.System.Data.DataColumn("UploadUserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUploadUserID)
            Me.columnUploadUserCompany = New Global.System.Data.DataColumn("UploadUserCompany", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUploadUserCompany)
            Me.columnUploadUserGroup = New Global.System.Data.DataColumn("UploadUserGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUploadUserGroup)
            Me.columnAIPSealType = New Global.System.Data.DataColumn("AIPSealType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPSealType)
            Me.columnApproval_Now = New Global.System.Data.DataColumn("Approval_Now", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApproval_Now)
            Me.columnAIPDone = New Global.System.Data.DataColumn("AIPDone", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIPDone)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, True))
            Me.columnid.AutoIncrement = True
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = False
            Me.columnid.ReadOnly = True
            Me.columnid.Unique = True
            Me.columnFileName.MaxLength = 100
            Me.columnFileExtension.MaxLength = 10
            Me.columnFileType.MaxLength = 20
            Me.columnFileID.MaxLength = 16
            Me.columnUploadUser.MaxLength = 10
            Me.columnUploadUserCompany.MaxLength = 30
            Me.columnUploadUserGroup.MaxLength = 10
            Me.columnAIPSealType.MaxLength = 10
            Me.columnApproval_Now.MaxLength = 20
            Me.columnRemarks.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewAIP_IngRow() As AIP_IngRow
            Return CType(Me.NewRow, AIP_IngRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AIP_IngRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AIP_IngRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AIP_IngRowChangedEvent) Is Nothing) Then
                RaiseEvent AIP_IngRowChanged(Me, New AIP_IngRowChangeEvent(CType(e.Row, AIP_IngRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AIP_IngRowChangingEvent) Is Nothing) Then
                RaiseEvent AIP_IngRowChanging(Me, New AIP_IngRowChangeEvent(CType(e.Row, AIP_IngRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AIP_IngRowDeletedEvent) Is Nothing) Then
                RaiseEvent AIP_IngRowDeleted(Me, New AIP_IngRowChangeEvent(CType(e.Row, AIP_IngRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AIP_IngRowDeletingEvent) Is Nothing) Then
                RaiseEvent AIP_IngRowDeleting(Me, New AIP_IngRowChangeEvent(CType(e.Row, AIP_IngRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveAIP_IngRow(ByVal row As AIP_IngRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AIP_IngDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AIP_Ing_SealKeeperRow
        Inherits Global.System.Data.DataRow

        Private tableAIP_Ing_SealKeeper As AIP_Ing_SealKeeperDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAIP_Ing_SealKeeper = CType(Me.Table, AIP_Ing_SealKeeperDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableAIP_Ing_SealKeeper.idColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableAIP_Ing_SealKeeper.idColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealType() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealTypeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealType""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealTypeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealGroup() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealGroupColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealGroup""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealGroupColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealCompany() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealCompanyColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealCompany""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealCompanyColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealPre() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealPreColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealPre""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealPreColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealNow() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealNowColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealNow""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealNowColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealNext() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.AIPSealNextColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""AIPSealNext""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.AIPSealNextColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_1() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.Approval_1Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""Approval_1""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.Approval_1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_2() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.Approval_2Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""Approval_2""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.Approval_2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_3() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.Approval_3Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""Approval_3""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.Approval_3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_4() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.Approval_4Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""Approval_4""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.Approval_4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_5() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing_SealKeeper.Approval_5Column), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing_SealKeeper""中列""Approval_5""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing_SealKeeper.Approval_5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealTypeNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealTypeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealTypeNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealTypeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealGroupNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealGroupColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealGroupNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealGroupColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealCompanyNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealCompanyColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealCompanyNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealCompanyColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealPreNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealPreColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealPreNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealPreColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealNowNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealNowColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealNowNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealNowColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealNextNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.AIPSealNextColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealNextNull()
            Me(Me.tableAIP_Ing_SealKeeper.AIPSealNextColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_1Null() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.Approval_1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_1Null()
            Me(Me.tableAIP_Ing_SealKeeper.Approval_1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_2Null() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.Approval_2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_2Null()
            Me(Me.tableAIP_Ing_SealKeeper.Approval_2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_3Null() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.Approval_3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_3Null()
            Me(Me.tableAIP_Ing_SealKeeper.Approval_3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_4Null() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.Approval_4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_4Null()
            Me(Me.tableAIP_Ing_SealKeeper.Approval_4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_5Null() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing_SealKeeper.Approval_5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_5Null()
            Me(Me.tableAIP_Ing_SealKeeper.Approval_5Column) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UsersRow
        Inherits Global.System.Data.DataRow

        Private tableUsers As UsersDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table, UsersDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableUsers.idColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableUsers.idColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tableUsers.UserNameColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableUsers.UserNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UserGroup() As String
            Get
                Return CType(Me(Me.tableUsers.UserGroupColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableUsers.UserGroupColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UserDept() As String
            Get
                Try
                    Return CType(Me(Me.tableUsers.UserDeptColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""UserDept""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableUsers.UserDeptColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UserCompany() As String
            Get
                Try
                    Return CType(Me(Me.tableUsers.UserCompanyColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""UserCompany""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableUsers.UserCompanyColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UserCompanyID() As String
            Get
                Try
                    Return CType(Me(Me.tableUsers.UserCompanyIDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""UserCompanyID""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableUsers.UserCompanyIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property isGroupMaster() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.isGroupMasterColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""isGroupMaster""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.isGroupMasterColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property isDeptManager() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.isDeptManagerColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""isDeptManager""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.isDeptManagerColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property isGeneraManager() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.isGeneraManagerColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""isGeneraManager""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.isGeneraManagerColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property isIT() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.isITColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""isIT""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.isITColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property isAdmin() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.isAdminColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""isAdmin""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.isAdminColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PermitPrint() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.PermitPrintColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""PermitPrint""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.PermitPrintColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property PermitSaveTo() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableUsers.PermitSaveToColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""Users""中列""PermitSaveTo""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableUsers.PermitSaveToColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUserDeptNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserDeptColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUserDeptNull()
            Me(Me.tableUsers.UserDeptColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUserCompanyNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserCompanyColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUserCompanyNull()
            Me(Me.tableUsers.UserCompanyColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUserCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableUsers.UserCompanyIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUserCompanyIDNull()
            Me(Me.tableUsers.UserCompanyIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsisGroupMasterNull() As Boolean
            Return Me.IsNull(Me.tableUsers.isGroupMasterColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetisGroupMasterNull()
            Me(Me.tableUsers.isGroupMasterColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsisDeptManagerNull() As Boolean
            Return Me.IsNull(Me.tableUsers.isDeptManagerColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetisDeptManagerNull()
            Me(Me.tableUsers.isDeptManagerColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsisGeneraManagerNull() As Boolean
            Return Me.IsNull(Me.tableUsers.isGeneraManagerColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetisGeneraManagerNull()
            Me(Me.tableUsers.isGeneraManagerColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsisITNull() As Boolean
            Return Me.IsNull(Me.tableUsers.isITColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetisITNull()
            Me(Me.tableUsers.isITColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsisAdminNull() As Boolean
            Return Me.IsNull(Me.tableUsers.isAdminColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetisAdminNull()
            Me(Me.tableUsers.isAdminColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPermitPrintNull() As Boolean
            Return Me.IsNull(Me.tableUsers.PermitPrintColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPermitPrintNull()
            Me(Me.tableUsers.PermitPrintColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsPermitSaveToNull() As Boolean
            Return Me.IsNull(Me.tableUsers.PermitSaveToColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetPermitSaveToNull()
            Me(Me.tableUsers.PermitSaveToColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AIP_IngRow
        Inherits Global.System.Data.DataRow

        Private tableAIP_Ing As AIP_IngDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAIP_Ing = CType(Me.Table, AIP_IngDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableAIP_Ing.idColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableAIP_Ing.idColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileName() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileNameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileName""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.FileNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileSize() As Integer
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileSizeColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileSize""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableAIP_Ing.FileSizeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileExtension() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileExtensionColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileExtension""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.FileExtensionColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileData() As Byte()
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileDataColumn), Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileData""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Byte())
                Me(Me.tableAIP_Ing.FileDataColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileType() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileTypeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileType""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.FileTypeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property FileID() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.FileIDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""FileID""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.FileIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UploadTime() As Date
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.UploadTimeColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""UploadTime""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableAIP_Ing.UploadTimeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UploadUser() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.UploadUserColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""UploadUser""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.UploadUserColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UploadUserID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.UploadUserIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""UploadUserID""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableAIP_Ing.UploadUserIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UploadUserCompany() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.UploadUserCompanyColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""UploadUserCompany""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.UploadUserCompanyColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UploadUserGroup() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.UploadUserGroupColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""UploadUserGroup""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.UploadUserGroupColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPSealType() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.AIPSealTypeColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""AIPSealType""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.AIPSealTypeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Approval_Now() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.Approval_NowColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""Approval_Now""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.Approval_NowColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property AIPDone() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.AIPDoneColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""AIPDone""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tableAIP_Ing.AIPDoneColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Remarks() As String
            Get
                Try
                    Return CType(Me(Me.tableAIP_Ing.RemarksColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("表""AIP_Ing""中列""Remarks""的值为 DBNull。", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableAIP_Ing.RemarksColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileNameNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileNameNull()
            Me(Me.tableAIP_Ing.FileNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileSizeNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileSizeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileSizeNull()
            Me(Me.tableAIP_Ing.FileSizeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileExtensionNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileExtensionColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileExtensionNull()
            Me(Me.tableAIP_Ing.FileExtensionColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileDataNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileDataColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileDataNull()
            Me(Me.tableAIP_Ing.FileDataColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileTypeNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileTypeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileTypeNull()
            Me(Me.tableAIP_Ing.FileTypeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFileIDNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.FileIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFileIDNull()
            Me(Me.tableAIP_Ing.FileIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUploadTimeNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.UploadTimeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUploadTimeNull()
            Me(Me.tableAIP_Ing.UploadTimeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUploadUserNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.UploadUserColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUploadUserNull()
            Me(Me.tableAIP_Ing.UploadUserColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUploadUserIDNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.UploadUserIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUploadUserIDNull()
            Me(Me.tableAIP_Ing.UploadUserIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUploadUserCompanyNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.UploadUserCompanyColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUploadUserCompanyNull()
            Me(Me.tableAIP_Ing.UploadUserCompanyColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsUploadUserGroupNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.UploadUserGroupColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetUploadUserGroupNull()
            Me(Me.tableAIP_Ing.UploadUserGroupColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPSealTypeNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.AIPSealTypeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPSealTypeNull()
            Me(Me.tableAIP_Ing.AIPSealTypeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsApproval_NowNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.Approval_NowColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetApproval_NowNull()
            Me(Me.tableAIP_Ing.Approval_NowColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAIPDoneNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.AIPDoneColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAIPDoneNull()
            Me(Me.tableAIP_Ing.AIPDoneColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableAIP_Ing.RemarksColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetRemarksNull()
            Me(Me.tableAIP_Ing.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class AIP_Ing_SealKeeperRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As AIP_Ing_SealKeeperRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As AIP_Ing_SealKeeperRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As AIP_Ing_SealKeeperRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class UsersRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As UsersRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As UsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class AIP_IngRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As AIP_IngRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As AIP_IngRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As AIP_IngRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class AIP_Ing_SealKeeperTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AIP_Ing_SealKeeper"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("AIPSealType", "AIPSealType")
            tableMapping.ColumnMappings.Add("AIPSealGroup", "AIPSealGroup")
            tableMapping.ColumnMappings.Add("AIPSealCompany", "AIPSealCompany")
            tableMapping.ColumnMappings.Add("AIPSealPre", "AIPSealPre")
            tableMapping.ColumnMappings.Add("AIPSealNow", "AIPSealNow")
            tableMapping.ColumnMappings.Add("AIPSealNext", "AIPSealNext")
            tableMapping.ColumnMappings.Add("Approval_1", "Approval_1")
            tableMapping.ColumnMappings.Add("Approval_2", "Approval_2")
            tableMapping.ColumnMappings.Add("Approval_3", "Approval_3")
            tableMapping.ColumnMappings.Add("Approval_4", "Approval_4")
            tableMapping.ColumnMappings.Add("Approval_5", "Approval_5")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [AIP_ING_SEALKEEPER] WHERE (([id] = @Original_id) AND ((@IsNull_AIPSe" & _
                "alType = 1 AND [AIPSealType] IS NULL) OR ([AIPSealType] = @Original_AIPSealType)" & _
                ") AND ((@IsNull_AIPSealGroup = 1 AND [AIPSealGroup] IS NULL) OR ([AIPSealGroup] " & _
                "= @Original_AIPSealGroup)) AND ((@IsNull_AIPSealCompany = 1 AND [AIPSealCompany]" & _
                " IS NULL) OR ([AIPSealCompany] = @Original_AIPSealCompany)) AND ((@IsNull_Approv" & _
                "al_1 = 1 AND [Approval_1] IS NULL) OR ([Approval_1] = @Original_Approval_1)) AND" & _
                " ((@IsNull_Approval_2 = 1 AND [Approval_2] IS NULL) OR ([Approval_2] = @Original" & _
                "_Approval_2)) AND ((@IsNull_Approval_3 = 1 AND [Approval_3] IS NULL) OR ([Approv" & _
                "al_3] = @Original_Approval_3)) AND ((@IsNull_Approval_4 = 1 AND [Approval_4] IS " & _
                "NULL) OR ([Approval_4] = @Original_Approval_4)) AND ((@IsNull_Approval_5 = 1 AND" & _
                " [Approval_5] IS NULL) OR ([Approval_5] = @Original_Approval_5)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [AIP_ING_SEALKEEPER] ([AIPSealType], [AIPSealGroup], [AIPSealCompany]" & _
                ", [Approval_1], [Approval_2], [Approval_3], [Approval_4], [Approval_5]) VALUES (" & _
                "@AIPSealType, @AIPSealGroup, @AIPSealCompany, @Approval_1, @Approval_2, @Approva" & _
                "l_3, @Approval_4, @Approval_5);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, AIPSealType, AIPSealGroup, AIPSealCo" & _
                "mpany, Approval_1, Approval_2, Approval_3, Approval_4, Approval_5 FROM AIP_Ing_S" & _
                "ealKeeper WHERE (id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [AIP_ING_SEALKEEPER] SET [AIPSealType] = @AIPSealType, [AIPSealGroup] = @A" & _
                "IPSealGroup, [AIPSealCompany] = @AIPSealCompany, [Approval_1] = @Approval_1, [Ap" & _
                "proval_2] = @Approval_2, [Approval_3] = @Approval_3, [Approval_4] = @Approval_4," & _
                " [Approval_5] = @Approval_5 WHERE (([id] = @Original_id) AND ((@IsNull_AIPSealTy" & _
                "pe = 1 AND [AIPSealType] IS NULL) OR ([AIPSealType] = @Original_AIPSealType)) AN" & _
                "D ((@IsNull_AIPSealGroup = 1 AND [AIPSealGroup] IS NULL) OR ([AIPSealGroup] = @O" & _
                "riginal_AIPSealGroup)) AND ((@IsNull_AIPSealCompany = 1 AND [AIPSealCompany] IS " & _
                "NULL) OR ([AIPSealCompany] = @Original_AIPSealCompany)) AND ((@IsNull_Approval_1" & _
                " = 1 AND [Approval_1] IS NULL) OR ([Approval_1] = @Original_Approval_1)) AND ((@" & _
                "IsNull_Approval_2 = 1 AND [Approval_2] IS NULL) OR ([Approval_2] = @Original_App" & _
                "roval_2)) AND ((@IsNull_Approval_3 = 1 AND [Approval_3] IS NULL) OR ([Approval_3" & _
                "] = @Original_Approval_3)) AND ((@IsNull_Approval_4 = 1 AND [Approval_4] IS NULL" & _
                ") OR ([Approval_4] = @Original_Approval_4)) AND ((@IsNull_Approval_5 = 1 AND [Ap" & _
                "proval_5] IS NULL) OR ([Approval_5] = @Original_Approval_5)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, AIPSe" & _
                "alType, AIPSealGroup, AIPSealCompany, Approval_1, Approval_2, Approval_3, Approv" & _
                "al_4, Approval_5 FROM AIP_Ing_SealKeeper WHERE (id = @id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_2", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_3", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_4", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_5", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.AIPMS.My.MySettings.Default.AIPConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from AIP_ING_SEALKEEPER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DataSet1.AIP_Ing_SealKeeperDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DataSet1.AIP_Ing_SealKeeperDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.AIP_Ing_SealKeeperDataTable = New DataSet1.AIP_Ing_SealKeeperDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DataSet1.AIP_Ing_SealKeeperDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "AIP_Ing_SealKeeper")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_id As Integer, ByVal Original_AIPSealType As String, ByVal Original_AIPSealGroup As String, ByVal Original_AIPSealCompany As String, ByVal Original_Approval_1 As String, ByVal Original_Approval_2 As String, ByVal Original_Approval_3 As String, ByVal Original_Approval_4 As String, ByVal Original_Approval_5 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id, Integer)
            If (Original_AIPSealType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AIPSealType, String)
            End If
            If (Original_AIPSealGroup Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_AIPSealGroup, String)
            End If
            If (Original_AIPSealCompany Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_AIPSealCompany, String)
            End If
            If (Original_Approval_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Approval_1, String)
            End If
            If (Original_Approval_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_2")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Approval_2, String)
            End If
            If (Original_Approval_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_3")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Approval_3, String)
            End If
            If (Original_Approval_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_4")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Approval_4, String)
            End If
            If (Original_Approval_5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_5")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Approval_5, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal AIPSealType As String, ByVal AIPSealGroup As String, ByVal AIPSealCompany As String, ByVal Approval_1 As String, ByVal Approval_2 As String, ByVal Approval_3 As String, ByVal Approval_4 As String, ByVal Approval_5 As String) As Integer
            If (AIPSealType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(AIPSealType, String)
            End If
            If (AIPSealGroup Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AIPSealGroup, String)
            End If
            If (AIPSealCompany Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AIPSealCompany, String)
            End If
            If (Approval_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_1")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Approval_1, String)
            End If
            If (Approval_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Approval_2, String)
            End If
            If (Approval_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_3")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Approval_3, String)
            End If
            If (Approval_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_4")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Approval_4, String)
            End If
            If (Approval_5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_5")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Approval_5, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal AIPSealType As String, _
                    ByVal AIPSealGroup As String, _
                    ByVal AIPSealCompany As String, _
                    ByVal Approval_1 As String, _
                    ByVal Approval_2 As String, _
                    ByVal Approval_3 As String, _
                    ByVal Approval_4 As String, _
                    ByVal Approval_5 As String, _
                    ByVal Original_id As Integer, _
                    ByVal Original_AIPSealType As String, _
                    ByVal Original_AIPSealGroup As String, _
                    ByVal Original_AIPSealCompany As String, _
                    ByVal Original_Approval_1 As String, _
                    ByVal Original_Approval_2 As String, _
                    ByVal Original_Approval_3 As String, _
                    ByVal Original_Approval_4 As String, _
                    ByVal Original_Approval_5 As String, _
                    ByVal id As Integer) As Integer
            If (AIPSealType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AIPSealType, String)
            End If
            If (AIPSealGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AIPSealGroup, String)
            End If
            If (AIPSealCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AIPSealCompany, String)
            End If
            If (Approval_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Approval_1, String)
            End If
            If (Approval_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Approval_2, String)
            End If
            If (Approval_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Approval_3, String)
            End If
            If (Approval_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_4")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Approval_4, String)
            End If
            If (Approval_5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Approval_5")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Approval_5, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_id, Integer)
            If (Original_AIPSealType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_AIPSealType, String)
            End If
            If (Original_AIPSealGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_AIPSealGroup, String)
            End If
            If (Original_AIPSealCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_AIPSealCompany, String)
            End If
            If (Original_Approval_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Approval_1, String)
            End If
            If (Original_Approval_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Approval_2, String)
            End If
            If (Original_Approval_3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_3")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Approval_3, String)
            End If
            If (Original_Approval_4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_4")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Approval_4, String)
            End If
            If (Original_Approval_5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Approval_5")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Approval_5, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(id, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal AIPSealType As String, _
                    ByVal AIPSealGroup As String, _
                    ByVal AIPSealCompany As String, _
                    ByVal Approval_1 As String, _
                    ByVal Approval_2 As String, _
                    ByVal Approval_3 As String, _
                    ByVal Approval_4 As String, _
                    ByVal Approval_5 As String, _
                    ByVal Original_id As Integer, _
                    ByVal Original_AIPSealType As String, _
                    ByVal Original_AIPSealGroup As String, _
                    ByVal Original_AIPSealCompany As String, _
                    ByVal Original_Approval_1 As String, _
                    ByVal Original_Approval_2 As String, _
                    ByVal Original_Approval_3 As String, _
                    ByVal Original_Approval_4 As String, _
                    ByVal Original_Approval_5 As String) As Integer
            Return Me.Update(AIPSealType, AIPSealGroup, AIPSealCompany, Approval_1, Approval_2, Approval_3, Approval_4, Approval_5, Original_id, Original_AIPSealType, Original_AIPSealGroup, Original_AIPSealCompany, Original_Approval_1, Original_Approval_2, Original_Approval_3, Original_Approval_4, Original_Approval_5, Original_id)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class UsersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Users"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("UserName", "UserName")
            tableMapping.ColumnMappings.Add("UserGroup", "UserGroup")
            tableMapping.ColumnMappings.Add("UserDept", "UserDept")
            tableMapping.ColumnMappings.Add("UserCompany", "UserCompany")
            tableMapping.ColumnMappings.Add("UserCompanyID", "UserCompanyID")
            tableMapping.ColumnMappings.Add("isGroupMaster", "isGroupMaster")
            tableMapping.ColumnMappings.Add("isDeptManager", "isDeptManager")
            tableMapping.ColumnMappings.Add("isGeneraManager", "isGeneraManager")
            tableMapping.ColumnMappings.Add("isIT", "isIT")
            tableMapping.ColumnMappings.Add("isAdmin", "isAdmin")
            tableMapping.ColumnMappings.Add("PermitPrint", "PermitPrint")
            tableMapping.ColumnMappings.Add("PermitSaveTo", "PermitSaveTo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [USERS] WHERE (([id] = @Original_id) AND ([UserName] = @Original_User" & _
                "Name) AND ([UserGroup] = @Original_UserGroup) AND ((@IsNull_UserDept = 1 AND [Us" & _
                "erDept] IS NULL) OR ([UserDept] = @Original_UserDept)) AND ((@IsNull_UserCompany" & _
                " = 1 AND [UserCompany] IS NULL) OR ([UserCompany] = @Original_UserCompany)) AND " & _
                "((@IsNull_UserCompanyID = 1 AND [UserCompanyID] IS NULL) OR ([UserCompanyID] = @" & _
                "Original_UserCompanyID)) AND ((@IsNull_isGroupMaster = 1 AND [isGroupMaster] IS " & _
                "NULL) OR ([isGroupMaster] = @Original_isGroupMaster)) AND ((@IsNull_isDeptManage" & _
                "r = 1 AND [isDeptManager] IS NULL) OR ([isDeptManager] = @Original_isDeptManager" & _
                ")) AND ((@IsNull_isGeneraManager = 1 AND [isGeneraManager] IS NULL) OR ([isGener" & _
                "aManager] = @Original_isGeneraManager)) AND ((@IsNull_isIT = 1 AND [isIT] IS NUL" & _
                "L) OR ([isIT] = @Original_isIT)) AND ((@IsNull_isAdmin = 1 AND [isAdmin] IS NULL" & _
                ") OR ([isAdmin] = @Original_isAdmin)) AND ((@IsNull_PermitPrint = 1 AND [PermitP" & _
                "rint] IS NULL) OR ([PermitPrint] = @Original_PermitPrint)) AND ((@IsNull_PermitS" & _
                "aveTo = 1 AND [PermitSaveTo] IS NULL) OR ([PermitSaveTo] = @Original_PermitSaveT" & _
                "o)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserDept", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserDept", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserCompanyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserCompanyID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isGroupMaster", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isGroupMaster", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isDeptManager", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isDeptManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isGeneraManager", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isGeneraManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isAdmin", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isAdmin", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PermitPrint", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PermitPrint", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PermitSaveTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PermitSaveTo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [USERS] ([UserName], [UserGroup], [UserDept], [UserCompany], [UserCom" & _
                "panyID], [isGroupMaster], [isDeptManager], [isGeneraManager], [isIT], [isAdmin]," & _
                " [PermitPrint], [PermitSaveTo]) VALUES (@UserName, @UserGroup, @UserDept, @UserC" & _
                "ompany, @UserCompanyID, @isGroupMaster, @isDeptManager, @isGeneraManager, @isIT," & _
                " @isAdmin, @PermitPrint, @PermitSaveTo);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, UserName, UserGroup, UserDe" & _
                "pt, UserCompany, UserCompanyID, isGroupMaster, isDeptManager, isGeneraManager, i" & _
                "sIT, isAdmin, PermitPrint, PermitSaveTo FROM Users WHERE (id = SCOPE_IDENTITY())" & _
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserDept", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserCompanyID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isGroupMaster", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isDeptManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isGeneraManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isAdmin", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PermitPrint", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PermitSaveTo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [USERS] SET [UserName] = @UserName, [UserGroup] = @UserGroup, [UserDept] =" & _
                " @UserDept, [UserCompany] = @UserCompany, [UserCompanyID] = @UserCompanyID, [isG" & _
                "roupMaster] = @isGroupMaster, [isDeptManager] = @isDeptManager, [isGeneraManager" & _
                "] = @isGeneraManager, [isIT] = @isIT, [isAdmin] = @isAdmin, [PermitPrint] = @Per" & _
                "mitPrint, [PermitSaveTo] = @PermitSaveTo WHERE (([id] = @Original_id) AND ([User" & _
                "Name] = @Original_UserName) AND ([UserGroup] = @Original_UserGroup) AND ((@IsNul" & _
                "l_UserDept = 1 AND [UserDept] IS NULL) OR ([UserDept] = @Original_UserDept)) AND" & _
                " ((@IsNull_UserCompany = 1 AND [UserCompany] IS NULL) OR ([UserCompany] = @Origi" & _
                "nal_UserCompany)) AND ((@IsNull_UserCompanyID = 1 AND [UserCompanyID] IS NULL) O" & _
                "R ([UserCompanyID] = @Original_UserCompanyID)) AND ((@IsNull_isGroupMaster = 1 A" & _
                "ND [isGroupMaster] IS NULL) OR ([isGroupMaster] = @Original_isGroupMaster)) AND " & _
                "((@IsNull_isDeptManager = 1 AND [isDeptManager] IS NULL) OR ([isDeptManager] = @" & _
                "Original_isDeptManager)) AND ((@IsNull_isGeneraManager = 1 AND [isGeneraManager]" & _
                " IS NULL) OR ([isGeneraManager] = @Original_isGeneraManager)) AND ((@IsNull_isIT" & _
                " = 1 AND [isIT] IS NULL) OR ([isIT] = @Original_isIT)) AND ((@IsNull_isAdmin = 1" & _
                " AND [isAdmin] IS NULL) OR ([isAdmin] = @Original_isAdmin)) AND ((@IsNull_Permit" & _
                "Print = 1 AND [PermitPrint] IS NULL) OR ([PermitPrint] = @Original_PermitPrint))" & _
                " AND ((@IsNull_PermitSaveTo = 1 AND [PermitSaveTo] IS NULL) OR ([PermitSaveTo] =" & _
                " @Original_PermitSaveTo)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, UserName, UserGroup, UserDept, UserCompa" & _
                "ny, UserCompanyID, isGroupMaster, isDeptManager, isGeneraManager, isIT, isAdmin," & _
                " PermitPrint, PermitSaveTo FROM Users WHERE (id = @id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserDept", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserCompanyID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isGroupMaster", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isDeptManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isGeneraManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@isAdmin", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PermitPrint", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PermitSaveTo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserDept", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserDept", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserDept", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserCompanyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserCompanyID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserCompanyID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isGroupMaster", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isGroupMaster", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGroupMaster", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isDeptManager", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isDeptManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isDeptManager", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isGeneraManager", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isGeneraManager", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isGeneraManager", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isIT", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isIT", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_isAdmin", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_isAdmin", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "isAdmin", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PermitPrint", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PermitPrint", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitPrint", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PermitSaveTo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PermitSaveTo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PermitSaveTo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.AIPMS.My.MySettings.Default.AIPConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT * FROM USERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DataSet1.UsersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DataSet1.UsersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.UsersDataTable = New DataSet1.UsersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DataSet1.UsersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "Users")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_id As Integer, ByVal Original_UserName As String, ByVal Original_UserGroup As String, ByVal Original_UserDept As String, ByVal Original_UserCompany As String, ByVal Original_UserCompanyID As String, ByVal Original_isGroupMaster As Global.System.Nullable(Of Boolean), ByVal Original_isDeptManager As Global.System.Nullable(Of Boolean), ByVal Original_isGeneraManager As Global.System.Nullable(Of Boolean), ByVal Original_isIT As Global.System.Nullable(Of Boolean), ByVal Original_isAdmin As Global.System.Nullable(Of Boolean), ByVal Original_PermitPrint As Global.System.Nullable(Of Boolean), ByVal Original_PermitSaveTo As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id, Integer)
            If (Original_UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UserName, String)
            End If
            If (Original_UserGroup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserGroup")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_UserGroup, String)
            End If
            If (Original_UserDept Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UserDept, String)
            End If
            If (Original_UserCompany Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UserCompany, String)
            End If
            If (Original_UserCompanyID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UserCompanyID, String)
            End If
            If (Original_isGroupMaster.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_isGroupMaster.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_isDeptManager.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_isDeptManager.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_isGeneraManager.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_isGeneraManager.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_isIT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_isIT.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_isAdmin.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_isAdmin.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PermitPrint.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PermitPrint.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_PermitSaveTo.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PermitSaveTo.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal UserName As String, ByVal UserGroup As String, ByVal UserDept As String, ByVal UserCompany As String, ByVal UserCompanyID As String, ByVal isGroupMaster As Global.System.Nullable(Of Boolean), ByVal isDeptManager As Global.System.Nullable(Of Boolean), ByVal isGeneraManager As Global.System.Nullable(Of Boolean), ByVal isIT As Global.System.Nullable(Of Boolean), ByVal isAdmin As Global.System.Nullable(Of Boolean), ByVal PermitPrint As Global.System.Nullable(Of Boolean), ByVal PermitSaveTo As Global.System.Nullable(Of Boolean)) As Integer
            If (UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(UserName, String)
            End If
            If (UserGroup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserGroup")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(UserGroup, String)
            End If
            If (UserDept Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UserDept, String)
            End If
            If (UserCompany Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(UserCompany, String)
            End If
            If (UserCompanyID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UserCompanyID, String)
            End If
            If (isGroupMaster.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(isGroupMaster.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (isDeptManager.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(isDeptManager.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (isGeneraManager.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(isGeneraManager.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (isIT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(isIT.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (isAdmin.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(isAdmin.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PermitPrint.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PermitPrint.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PermitSaveTo.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PermitSaveTo.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal UserName As String, _
                    ByVal UserGroup As String, _
                    ByVal UserDept As String, _
                    ByVal UserCompany As String, _
                    ByVal UserCompanyID As String, _
                    ByVal isGroupMaster As Global.System.Nullable(Of Boolean), _
                    ByVal isDeptManager As Global.System.Nullable(Of Boolean), _
                    ByVal isGeneraManager As Global.System.Nullable(Of Boolean), _
                    ByVal isIT As Global.System.Nullable(Of Boolean), _
                    ByVal isAdmin As Global.System.Nullable(Of Boolean), _
                    ByVal PermitPrint As Global.System.Nullable(Of Boolean), _
                    ByVal PermitSaveTo As Global.System.Nullable(Of Boolean), _
                    ByVal Original_id As Integer, _
                    ByVal Original_UserName As String, _
                    ByVal Original_UserGroup As String, _
                    ByVal Original_UserDept As String, _
                    ByVal Original_UserCompany As String, _
                    ByVal Original_UserCompanyID As String, _
                    ByVal Original_isGroupMaster As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isDeptManager As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isGeneraManager As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isIT As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isAdmin As Global.System.Nullable(Of Boolean), _
                    ByVal Original_PermitPrint As Global.System.Nullable(Of Boolean), _
                    ByVal Original_PermitSaveTo As Global.System.Nullable(Of Boolean), _
                    ByVal id As Integer) As Integer
            If (UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(UserName, String)
            End If
            If (UserGroup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UserGroup")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(UserGroup, String)
            End If
            If (UserDept Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UserDept, String)
            End If
            If (UserCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UserCompany, String)
            End If
            If (UserCompanyID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UserCompanyID, String)
            End If
            If (isGroupMaster.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(isGroupMaster.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (isDeptManager.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(isDeptManager.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (isGeneraManager.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(isGeneraManager.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (isIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(isIT.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (isAdmin.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(isAdmin.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PermitPrint.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PermitPrint.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PermitSaveTo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PermitSaveTo.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_id, Integer)
            If (Original_UserName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserName")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_UserName, String)
            End If
            If (Original_UserGroup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UserGroup")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_UserGroup, String)
            End If
            If (Original_UserDept Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UserDept, String)
            End If
            If (Original_UserCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_UserCompany, String)
            End If
            If (Original_UserCompanyID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_UserCompanyID, String)
            End If
            If (Original_isGroupMaster.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_isGroupMaster.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_isDeptManager.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_isDeptManager.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_isGeneraManager.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_isGeneraManager.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_isIT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_isIT.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_isAdmin.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_isAdmin.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_PermitPrint.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PermitPrint.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_PermitSaveTo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PermitSaveTo.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(id, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal UserName As String, _
                    ByVal UserGroup As String, _
                    ByVal UserDept As String, _
                    ByVal UserCompany As String, _
                    ByVal UserCompanyID As String, _
                    ByVal isGroupMaster As Global.System.Nullable(Of Boolean), _
                    ByVal isDeptManager As Global.System.Nullable(Of Boolean), _
                    ByVal isGeneraManager As Global.System.Nullable(Of Boolean), _
                    ByVal isIT As Global.System.Nullable(Of Boolean), _
                    ByVal isAdmin As Global.System.Nullable(Of Boolean), _
                    ByVal PermitPrint As Global.System.Nullable(Of Boolean), _
                    ByVal PermitSaveTo As Global.System.Nullable(Of Boolean), _
                    ByVal Original_id As Integer, _
                    ByVal Original_UserName As String, _
                    ByVal Original_UserGroup As String, _
                    ByVal Original_UserDept As String, _
                    ByVal Original_UserCompany As String, _
                    ByVal Original_UserCompanyID As String, _
                    ByVal Original_isGroupMaster As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isDeptManager As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isGeneraManager As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isIT As Global.System.Nullable(Of Boolean), _
                    ByVal Original_isAdmin As Global.System.Nullable(Of Boolean), _
                    ByVal Original_PermitPrint As Global.System.Nullable(Of Boolean), _
                    ByVal Original_PermitSaveTo As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(UserName, UserGroup, UserDept, UserCompany, UserCompanyID, isGroupMaster, isDeptManager, isGeneraManager, isIT, isAdmin, PermitPrint, PermitSaveTo, Original_id, Original_UserName, Original_UserGroup, Original_UserDept, Original_UserCompany, Original_UserCompanyID, Original_isGroupMaster, Original_isDeptManager, Original_isGeneraManager, Original_isIT, Original_isAdmin, Original_PermitPrint, Original_PermitSaveTo, Original_id)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class AIP_IngTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AIP_Ing"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("FileName", "FileName")
            tableMapping.ColumnMappings.Add("FileSize", "FileSize")
            tableMapping.ColumnMappings.Add("FileExtension", "FileExtension")
            tableMapping.ColumnMappings.Add("FileData", "FileData")
            tableMapping.ColumnMappings.Add("FileType", "FileType")
            tableMapping.ColumnMappings.Add("FileID", "FileID")
            tableMapping.ColumnMappings.Add("UploadTime", "UploadTime")
            tableMapping.ColumnMappings.Add("UploadUser", "UploadUser")
            tableMapping.ColumnMappings.Add("UploadUserID", "UploadUserID")
            tableMapping.ColumnMappings.Add("UploadUserCompany", "UploadUserCompany")
            tableMapping.ColumnMappings.Add("UploadUserGroup", "UploadUserGroup")
            tableMapping.ColumnMappings.Add("AIPSealType", "AIPSealType")
            tableMapping.ColumnMappings.Add("Approval_Now", "Approval_Now")
            tableMapping.ColumnMappings.Add("AIPDone", "AIPDone")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [aip_ing] WHERE (([id] = @Original_id) AND ((@IsNull_FileName = 1 AND" & _
                " [FileName] IS NULL) OR ([FileName] = @Original_FileName)) AND ((@IsNull_FileSiz" & _
                "e = 1 AND [FileSize] IS NULL) OR ([FileSize] = @Original_FileSize)) AND ((@IsNul" & _
                "l_FileExtension = 1 AND [FileExtension] IS NULL) OR ([FileExtension] = @Original" & _
                "_FileExtension)) AND ((@IsNull_FileType = 1 AND [FileType] IS NULL) OR ([FileTyp" & _
                "e] = @Original_FileType)) AND ((@IsNull_FileID = 1 AND [FileID] IS NULL) OR ([Fi" & _
                "leID] = @Original_FileID)) AND ((@IsNull_UploadTime = 1 AND [UploadTime] IS NULL" & _
                ") OR ([UploadTime] = @Original_UploadTime)) AND ((@IsNull_UploadUser = 1 AND [Up" & _
                "loadUser] IS NULL) OR ([UploadUser] = @Original_UploadUser)) AND ((@IsNull_Uploa" & _
                "dUserID = 1 AND [UploadUserID] IS NULL) OR ([UploadUserID] = @Original_UploadUse" & _
                "rID)) AND ((@IsNull_UploadUserCompany = 1 AND [UploadUserCompany] IS NULL) OR ([" & _
                "UploadUserCompany] = @Original_UploadUserCompany)) AND ((@IsNull_UploadUserGroup" & _
                " = 1 AND [UploadUserGroup] IS NULL) OR ([UploadUserGroup] = @Original_UploadUser" & _
                "Group)) AND ((@IsNull_AIPSealType = 1 AND [AIPSealType] IS NULL) OR ([AIPSealTyp" & _
                "e] = @Original_AIPSealType)) AND ((@IsNull_Approval_Now = 1 AND [Approval_Now] I" & _
                "S NULL) OR ([Approval_Now] = @Original_Approval_Now)) AND ((@IsNull_AIPDone = 1 " & _
                "AND [AIPDone] IS NULL) OR ([AIPDone] = @Original_AIPDone)) AND ((@IsNull_Remarks" & _
                " = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Remarks)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileExtension", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileExtension", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUser", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_Now", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_Now", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPDone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPDone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [aip_ing] ([FileName], [FileSize], [FileExtension], [FileData], [File" & _
                "Type], [FileID], [UploadTime], [UploadUser], [UploadUserID], [UploadUserCompany]" & _
                ", [UploadUserGroup], [AIPSealType], [Approval_Now], [AIPDone], [Remarks]) VALUES" & _
                " (@FileName, @FileSize, @FileExtension, @FileData, @FileType, @FileID, @UploadTi" & _
                "me, @UploadUser, @UploadUserID, @UploadUserCompany, @UploadUserGroup, @AIPSealTy" & _
                "pe, @Approval_Now, @AIPDone, @Remarks);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, FileName, FileSize, FileExte" & _
                "nsion, FileData, FileType, FileID, UploadTime, UploadUser, UploadUserID, UploadU" & _
                "serCompany, UploadUserGroup, AIPSealType, Approval_Now, AIPDone, Remarks FROM AI" & _
                "P_Ing WHERE (id = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileExtension", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileData", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileData", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUser", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_Now", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPDone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [aip_ing] SET [FileName] = @FileName, [FileSize] = @FileSize, [FileExtensi" & _
                "on] = @FileExtension, [FileData] = @FileData, [FileType] = @FileType, [FileID] =" & _
                " @FileID, [UploadTime] = @UploadTime, [UploadUser] = @UploadUser, [UploadUserID]" & _
                " = @UploadUserID, [UploadUserCompany] = @UploadUserCompany, [UploadUserGroup] = " & _
                "@UploadUserGroup, [AIPSealType] = @AIPSealType, [Approval_Now] = @Approval_Now, " & _
                "[AIPDone] = @AIPDone, [Remarks] = @Remarks WHERE (([id] = @Original_id) AND ((@I" & _
                "sNull_FileName = 1 AND [FileName] IS NULL) OR ([FileName] = @Original_FileName))" & _
                " AND ((@IsNull_FileSize = 1 AND [FileSize] IS NULL) OR ([FileSize] = @Original_F" & _
                "ileSize)) AND ((@IsNull_FileExtension = 1 AND [FileExtension] IS NULL) OR ([File" & _
                "Extension] = @Original_FileExtension)) AND ((@IsNull_FileType = 1 AND [FileType]" & _
                " IS NULL) OR ([FileType] = @Original_FileType)) AND ((@IsNull_FileID = 1 AND [Fi" & _
                "leID] IS NULL) OR ([FileID] = @Original_FileID)) AND ((@IsNull_UploadTime = 1 AN" & _
                "D [UploadTime] IS NULL) OR ([UploadTime] = @Original_UploadTime)) AND ((@IsNull_" & _
                "UploadUser = 1 AND [UploadUser] IS NULL) OR ([UploadUser] = @Original_UploadUser" & _
                ")) AND ((@IsNull_UploadUserID = 1 AND [UploadUserID] IS NULL) OR ([UploadUserID]" & _
                " = @Original_UploadUserID)) AND ((@IsNull_UploadUserCompany = 1 AND [UploadUserC" & _
                "ompany] IS NULL) OR ([UploadUserCompany] = @Original_UploadUserCompany)) AND ((@" & _
                "IsNull_UploadUserGroup = 1 AND [UploadUserGroup] IS NULL) OR ([UploadUserGroup] " & _
                "= @Original_UploadUserGroup)) AND ((@IsNull_AIPSealType = 1 AND [AIPSealType] IS" & _
                " NULL) OR ([AIPSealType] = @Original_AIPSealType)) AND ((@IsNull_Approval_Now = " & _
                "1 AND [Approval_Now] IS NULL) OR ([Approval_Now] = @Original_Approval_Now)) AND " & _
                "((@IsNull_AIPDone = 1 AND [AIPDone] IS NULL) OR ([AIPDone] = @Original_AIPDone))" & _
                " AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Original_Rema" & _
                "rks)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT id, FileName, FileSize, FileExtension, FileData, FileType, FileI" & _
                "D, UploadTime, UploadUser, UploadUserID, UploadUserCompany, UploadUserGroup, AIP" & _
                "SealType, Approval_Now, AIPDone, Remarks FROM AIP_Ing WHERE (id = @id)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileExtension", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileData", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileData", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FileID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUser", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UploadUserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Approval_Now", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AIPDone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileName", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileSize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileSize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileExtension", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileExtension", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileExtension", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FileID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FileID", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FileID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadTime", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUser", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUser", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserCompany", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserCompany", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserCompany", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UploadUserGroup", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UploadUserGroup", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UploadUserGroup", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPSealType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPSealType", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPSealType", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Approval_Now", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Approval_Now", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Approval_Now", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AIPDone", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AIPDone", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AIPDone", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.AIPMS.My.MySettings.Default.AIPConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from aip_ing"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DataSet1.AIP_IngDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DataSet1.AIP_IngDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.AIP_IngDataTable = New DataSet1.AIP_IngDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DataSet1.AIP_IngDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "AIP_Ing")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_id As Integer, ByVal Original_FileName As String, ByVal Original_FileSize As Global.System.Nullable(Of Integer), ByVal Original_FileExtension As String, ByVal Original_FileType As String, ByVal Original_FileID As String, ByVal Original_UploadTime As Global.System.Nullable(Of Date), ByVal Original_UploadUser As String, ByVal Original_UploadUserID As Global.System.Nullable(Of Integer), ByVal Original_UploadUserCompany As String, ByVal Original_UploadUserGroup As String, ByVal Original_AIPSealType As String, ByVal Original_Approval_Now As String, ByVal Original_AIPDone As Global.System.Nullable(Of Boolean), ByVal Original_Remarks As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id, Integer)
            If (Original_FileName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FileName, String)
            End If
            If (Original_FileSize.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FileSize.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_FileExtension Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FileExtension, String)
            End If
            If (Original_FileType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FileType, String)
            End If
            If (Original_FileID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FileID, String)
            End If
            If (Original_UploadTime.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_UploadTime.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_UploadUser Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UploadUser, String)
            End If
            If (Original_UploadUserID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_UploadUserID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_UploadUserCompany Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_UploadUserCompany, String)
            End If
            If (Original_UploadUserGroup Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_UploadUserGroup, String)
            End If
            If (Original_AIPSealType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_AIPSealType, String)
            End If
            If (Original_Approval_Now Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Approval_Now, String)
            End If
            If (Original_AIPDone.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_AIPDone.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Remarks, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FileName As String, ByVal FileSize As Global.System.Nullable(Of Integer), ByVal FileExtension As String, ByVal FileData() As Byte, ByVal FileType As String, ByVal FileID As String, ByVal UploadTime As Global.System.Nullable(Of Date), ByVal UploadUser As String, ByVal UploadUserID As Global.System.Nullable(Of Integer), ByVal UploadUserCompany As String, ByVal UploadUserGroup As String, ByVal AIPSealType As String, ByVal Approval_Now As String, ByVal AIPDone As Global.System.Nullable(Of Boolean), ByVal Remarks As String) As Integer
            If (FileName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FileName, String)
            End If
            If (FileSize.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FileSize.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FileExtension Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FileExtension, String)
            End If
            If (FileData Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FileData, Byte())
            End If
            If (FileType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FileType, String)
            End If
            If (FileID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FileID, String)
            End If
            If (UploadTime.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UploadTime.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (UploadUser Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(UploadUser, String)
            End If
            If (UploadUserID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(UploadUserID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UploadUserCompany Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UploadUserCompany, String)
            End If
            If (UploadUserGroup Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(UploadUserGroup, String)
            End If
            If (AIPSealType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(AIPSealType, String)
            End If
            If (Approval_Now Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Approval_Now, String)
            End If
            If (AIPDone.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(AIPDone.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Remarks, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal FileName As String, _
                    ByVal FileSize As Global.System.Nullable(Of Integer), _
                    ByVal FileExtension As String, _
                    ByVal FileData() As Byte, _
                    ByVal FileType As String, _
                    ByVal FileID As String, _
                    ByVal UploadTime As Global.System.Nullable(Of Date), _
                    ByVal UploadUser As String, _
                    ByVal UploadUserID As Global.System.Nullable(Of Integer), _
                    ByVal UploadUserCompany As String, _
                    ByVal UploadUserGroup As String, _
                    ByVal AIPSealType As String, _
                    ByVal Approval_Now As String, _
                    ByVal AIPDone As Global.System.Nullable(Of Boolean), _
                    ByVal Remarks As String, _
                    ByVal Original_id As Integer, _
                    ByVal Original_FileName As String, _
                    ByVal Original_FileSize As Global.System.Nullable(Of Integer), _
                    ByVal Original_FileExtension As String, _
                    ByVal Original_FileType As String, _
                    ByVal Original_FileID As String, _
                    ByVal Original_UploadTime As Global.System.Nullable(Of Date), _
                    ByVal Original_UploadUser As String, _
                    ByVal Original_UploadUserID As Global.System.Nullable(Of Integer), _
                    ByVal Original_UploadUserCompany As String, _
                    ByVal Original_UploadUserGroup As String, _
                    ByVal Original_AIPSealType As String, _
                    ByVal Original_Approval_Now As String, _
                    ByVal Original_AIPDone As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Remarks As String, _
                    ByVal id As Integer) As Integer
            If (FileName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FileName, String)
            End If
            If (FileSize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FileSize.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FileExtension Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FileExtension, String)
            End If
            If (FileData Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FileData, Byte())
            End If
            If (FileType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FileType, String)
            End If
            If (FileID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FileID, String)
            End If
            If (UploadTime.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UploadTime.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (UploadUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(UploadUser, String)
            End If
            If (UploadUserID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UploadUserID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UploadUserCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UploadUserCompany, String)
            End If
            If (UploadUserGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UploadUserGroup, String)
            End If
            If (AIPSealType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(AIPSealType, String)
            End If
            If (Approval_Now Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Approval_Now, String)
            End If
            If (AIPDone.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(AIPDone.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Remarks, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_id, Integer)
            If (Original_FileName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FileName, String)
            End If
            If (Original_FileSize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FileSize.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_FileExtension Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FileExtension, String)
            End If
            If (Original_FileType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_FileType, String)
            End If
            If (Original_FileID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_FileID, String)
            End If
            If (Original_UploadTime.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_UploadTime.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_UploadUser Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_UploadUser, String)
            End If
            If (Original_UploadUserID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_UploadUserID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_UploadUserCompany Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_UploadUserCompany, String)
            End If
            If (Original_UploadUserGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_UploadUserGroup, String)
            End If
            If (Original_AIPSealType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_AIPSealType, String)
            End If
            If (Original_Approval_Now Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Approval_Now, String)
            End If
            If (Original_AIPDone.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_AIPDone.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Remarks, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(id, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal FileName As String, _
                    ByVal FileSize As Global.System.Nullable(Of Integer), _
                    ByVal FileExtension As String, _
                    ByVal FileData() As Byte, _
                    ByVal FileType As String, _
                    ByVal FileID As String, _
                    ByVal UploadTime As Global.System.Nullable(Of Date), _
                    ByVal UploadUser As String, _
                    ByVal UploadUserID As Global.System.Nullable(Of Integer), _
                    ByVal UploadUserCompany As String, _
                    ByVal UploadUserGroup As String, _
                    ByVal AIPSealType As String, _
                    ByVal Approval_Now As String, _
                    ByVal AIPDone As Global.System.Nullable(Of Boolean), _
                    ByVal Remarks As String, _
                    ByVal Original_id As Integer, _
                    ByVal Original_FileName As String, _
                    ByVal Original_FileSize As Global.System.Nullable(Of Integer), _
                    ByVal Original_FileExtension As String, _
                    ByVal Original_FileType As String, _
                    ByVal Original_FileID As String, _
                    ByVal Original_UploadTime As Global.System.Nullable(Of Date), _
                    ByVal Original_UploadUser As String, _
                    ByVal Original_UploadUserID As Global.System.Nullable(Of Integer), _
                    ByVal Original_UploadUserCompany As String, _
                    ByVal Original_UploadUserGroup As String, _
                    ByVal Original_AIPSealType As String, _
                    ByVal Original_Approval_Now As String, _
                    ByVal Original_AIPDone As Global.System.Nullable(Of Boolean), _
                    ByVal Original_Remarks As String) As Integer
            Return Me.Update(FileName, FileSize, FileExtension, FileData, FileType, FileID, UploadTime, UploadUser, UploadUserID, UploadUserCompany, UploadUserGroup, AIPSealType, Approval_Now, AIPDone, Remarks, Original_id, Original_FileName, Original_FileSize, Original_FileExtension, Original_FileType, Original_FileID, Original_UploadTime, Original_UploadUser, Original_UploadUserID, Original_UploadUserCompany, Original_UploadUserGroup, Original_AIPSealType, Original_Approval_Now, Original_AIPDone, Original_Remarks, Original_id)
        End Function
    End Class

    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & _
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As UpdateOrderOption

        Private _aIP_Ing_SealKeeperTableAdapter As AIP_Ing_SealKeeperTableAdapter

        Private _usersTableAdapter As UsersTableAdapter

        Private _aIP_IngTableAdapter As AIP_IngTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set(value As UpdateOrderOption)
                Me._updateOrder = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property AIP_Ing_SealKeeperTableAdapter() As AIP_Ing_SealKeeperTableAdapter
            Get
                Return Me._aIP_Ing_SealKeeperTableAdapter
            End Get
            Set(value As AIP_Ing_SealKeeperTableAdapter)
                Me._aIP_Ing_SealKeeperTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property UsersTableAdapter() As UsersTableAdapter
            Get
                Return Me._usersTableAdapter
            End Get
            Set(value As UsersTableAdapter)
                Me._usersTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property AIP_IngTableAdapter() As AIP_IngTableAdapter
            Get
                Return Me._aIP_IngTableAdapter
            End Get
            Set(value As AIP_IngTableAdapter)
                Me._aIP_IngTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set(value As Boolean)
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._aIP_Ing_SealKeeperTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aIP_Ing_SealKeeperTableAdapter.Connection
                End If
                If ((Not (Me._usersTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._usersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._usersTableAdapter.Connection
                End If
                If ((Not (Me._aIP_IngTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._aIP_IngTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aIP_IngTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set(value As Global.System.Data.IDbConnection)
                Me._connection = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property

        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing_SealKeeper.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aIP_Ing_SealKeeperTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aIP_IngTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing_SealKeeper.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aIP_Ing_SealKeeperTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aIP_IngTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aIP_IngTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._usersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AIP_Ing_SealKeeper.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aIP_Ing_SealKeeperTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing) _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing) _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = False) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function

        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = False) Then
                Return 0
            End If
            If ((Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aIP_Ing_SealKeeperTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。")
            End If
            If ((Not (Me._usersTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._usersTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。")
            End If
            If ((Not (Me._aIP_IngTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aIP_IngTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" & _
                        "eAdapter 实例。")
            End If
            Dim workConnOpened As Boolean = False
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close()
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open()
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                '---- Prepare for update -----------
                '
                If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aIP_Ing_SealKeeperTableAdapter, Me._aIP_Ing_SealKeeperTableAdapter.Connection)
                    Me._aIP_Ing_SealKeeperTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._aIP_Ing_SealKeeperTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aIP_Ing_SealKeeperTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aIP_Ing_SealKeeperTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aIP_Ing_SealKeeperTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._usersTableAdapter, Me._usersTableAdapter.Connection)
                    Me._usersTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._usersTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._usersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aIP_IngTableAdapter, Me._aIP_IngTableAdapter.Connection)
                    Me._aIP_IngTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._aIP_IngTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aIP_IngTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aIP_IngTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aIP_IngTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit()
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback()
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear()
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges()
                            row.SetAdded()
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close()
                End If
                If (Not (Me._aIP_Ing_SealKeeperTableAdapter) Is Nothing) Then
                    Me._aIP_Ing_SealKeeperTableAdapter.Connection = CType(revertConnections(Me._aIP_Ing_SealKeeperTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._aIP_Ing_SealKeeperTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._usersTableAdapter) Is Nothing) Then
                    Me._usersTableAdapter.Connection = CType(revertConnections(Me._usersTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._usersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aIP_IngTableAdapter) Is Nothing) Then
                    Me._aIP_IngTableAdapter.Connection = CType(revertConnections(Me._aIP_IngTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._aIP_IngTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return True
            End If
            If ((Me.Connection Is Nothing) _
                        OrElse (inputConnection Is Nothing)) Then
                Return True
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

            Private _relation As Global.System.Data.DataRelation

            Private _childFirst As Integer

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New()
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing) _
                            AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear()
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing) _
                                AndAlso (traversedRows.ContainsKey(parent) = False))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing) _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
